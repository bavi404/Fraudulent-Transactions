name: Enhanced Fraud Detection Pipeline CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.9'

jobs:
  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r Code\ Files/ -f json -o bandit-report.json || true
      
      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Code Quality and Testing
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Code\ Files/requirements.txt
      
      - name: Run Black formatter
        run: |
          black --check --diff Code\ Files/
      
      - name: Run Flake8 linter
        run: |
          flake8 Code\ Files/ --max-line-length=100 --extend-ignore=E203,W503
      
      - name: Run MyPy type checker
        run: |
          mypy Code\ Files/ --ignore-missing-imports
      
      - name: Run unit tests
        run: |
          pytest Code\ Files/tests/ --cov=Code\ Files/ --cov-report=xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Infrastructure Validation
  infrastructure-validation:
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://Code\ Files/enhanced-cloudformation.yaml
      
      - name: Run CloudFormation linting
        run: |
          pip install cfn-lint
          cfn-lint Code\ Files/enhanced-cloudformation.yaml

  # Development Environment Deployment
  deploy-development:
    runs-on: ubuntu-latest
    needs: [infrastructure-validation]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to Development
        run: |
          aws cloudformation deploy \
            --stack-name fraud-detection-dev \
            --template-file Code\ Files/enhanced-cloudformation.yaml \
            --parameter-overrides Environment=development \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --tags Environment=development Project=FraudDetection
      
      - name: Start Glue Crawler
        run: |
          aws glue start-crawler --name enhanced-data-crawler-development
      
      - name: Deploy ML Models
        run: |
          aws s3 cp Code\ Files/enhanced-fraud-detection.py \
            s3://fraud-detection-artifacts-${{ secrets.AWS_ACCOUNT_ID }}-development/
      
      - name: Run Smoke Tests
        run: |
          # Wait for EMR cluster to be ready
          sleep 300
          # Basic connectivity tests
          aws emr describe-cluster --cluster-id ${{ steps.deploy.outputs.cluster-id }}

  # Staging Environment Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [deploy-development]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to Staging
        run: |
          aws cloudformation deploy \
            --stack-name fraud-detection-staging \
            --template-file Code\ Files/enhanced-cloudformation.yaml \
            --parameter-overrides Environment=staging \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --tags Environment=staging Project=FraudDetection
      
      - name: Start Glue Crawler
        run: |
          aws glue start-crawler --name enhanced-data-crawler-staging
      
      - name: Deploy ML Models
        run: |
          aws s3 cp Code\ Files/enhanced-fraud-detection.py \
            s3://fraud-detection-artifacts-${{ secrets.AWS_ACCOUNT_ID }}-staging/
      
      - name: Run Integration Tests
        run: |
          # Wait for deployment
          sleep 300
          # Run integration tests
          python Code\ Files/run_integration_tests.py --environment staging

  # Production Environment Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to Production
        run: |
          aws cloudformation deploy \
            --stack-name fraud-detection-production \
            --template-file Code\ Files/enhanced-cloudformation.yaml \
            --parameter-overrides Environment=production \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --tags Environment=production Project=FraudDetection
      
      - name: Start Glue Crawler
        run: |
          aws glue start-crawler --name enhanced-data-crawler-production
      
      - name: Deploy ML Models
        run: |
          aws s3 cp Code\ Files/enhanced-fraud-detection.py \
            s3://fraud-detection-artifacts-${{ secrets.AWS_ACCOUNT_ID }}-production/
      
      - name: Run Production Validation
        run: |
          # Wait for deployment
          sleep 600
          # Run production validation tests
          python Code\ Files/run_production_validation.py

  # Monitoring and Alerting Setup
  setup-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event.inputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup CloudWatch Alarms
        run: |
          # Create high CPU alarm
          aws cloudwatch put-metric-alarm \
            --alarm-name "fraud-detection-high-cpu" \
            --alarm-description "High CPU usage in fraud detection pipeline" \
            --metric-name CPUUtilization \
            --namespace AWS/ElasticMapReduce \
            --statistic Average \
            --period 300 \
            --threshold 80 \
            --comparison-operator GreaterThanThreshold \
            --evaluation-periods 2 \
            --alarm-actions ${{ steps.deploy-production.outputs.sns-topic-arn }}
      
      - name: Setup SNS Subscriptions
        run: |
          # Subscribe to fraud alerts
          aws sns subscribe \
            --topic-arn ${{ steps.deploy-production.outputs.sns-topic-arn }} \
            --protocol email \
            --notification-endpoint ${{ secrets.ALERT_EMAIL }}

  # Performance Testing
  performance-testing:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r Code\ Files/requirements.txt
          pip install locust
      
      - name: Run Performance Tests
        run: |
          # Run load testing
          locust -f Code\ Files/performance_tests/locustfile.py \
            --host=http://staging-endpoint \
            --users=100 \
            --spawn-rate=10 \
            --run-time=300 \
            --headless
      
      - name: Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: locust-report.html

  # Documentation Generation
  generate-docs:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install documentation tools
        run: |
          pip install sphinx sphinx-rtd-theme
      
      - name: Generate API documentation
        run: |
          cd Code\ Files/docs
          make html
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: Code\ Files/docs/build/html/

  # Cleanup and Maintenance
  cleanup:
    runs-on: ubuntu-latest
    needs: [generate-docs]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Cleanup old EMR clusters
        run: |
          # Find and terminate old EMR clusters
          aws emr list-clusters --active | \
          jq -r '.Clusters[] | select(.Status.State == "WAITING") | .Id' | \
          head -n -3 | \
          xargs -I {} aws emr terminate-clusters --cluster-ids {}
      
      - name: Cleanup old S3 objects
        run: |
          # Cleanup old logs (keep last 30 days)
          aws s3 ls s3://fraud-detection-logs-${{ secrets.AWS_ACCOUNT_ID }}-production/ | \
          awk '$1 < "'$(date -d '30 days ago' +%Y-%m-%d)'"' | \
          awk '{print $4}' | \
          xargs -I {} aws s3 rm s3://fraud-detection-logs-${{ secrets.AWS_ACCOUNT_ID }}-production/{}

